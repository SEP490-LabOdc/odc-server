server:
  port: 8080

spring:
  application:
    name: api-gateway
  profiles:
    active: dev
  main:
    web-application-type: REACTIVE
  cloud:
    gateway:
      routes:
        # User Service Routes
        - id: user-service-auth
          uri: lb://user-service
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - StripPrefix=0
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 40
                redis-rate-limiter.requestedTokens: 1

        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/v1/users/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: user-service-cb
                fallbackUri: forward:/fallback/user-service

        # Business Service Routes
        - id: business-service
          uri: lb://business-service
          predicates:
            - Path=/api/v1/businesses/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: business-service-cb
                fallbackUri: forward:/fallback/business-service

        # Talent Pool Service Routes
        - id: talent-pool-service
          uri: lb://talent-pool-service
          predicates:
            - Path=/api/v1/talents/**
          filters:
            - StripPrefix=0
            - name: CircuitBreaker
              args:
                name: talent-pool-service-cb
                fallbackUri: forward:/fallback/talent-pool-service

        # Notification Service Routes
        - id: notification-service-rest
          uri: lb://notification-service
          predicates:
            - Path=/api/v1/notifications/**
          filters:
            - StripPrefix=0

        - id: notification-service-ws
          uri: lb://notification-service
          predicates:
            - Path=/ws/**
          filters:
            - StripPrefix=0

      # Global Filters
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY,SERVICE_UNAVAILABLE
            methods: GET,POST,PUT,DELETE

      # CORS Configuration
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - PATCH
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://eureka:eureka123@localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30
    metadata-map:
      version: 1.0.0
      environment: ${spring.profiles.active}

# Redis Configuration
spring.redis:
  host: localhost
  port: 6379
  password:
  database: 0
  timeout: 2000ms
  lettuce:
    pool:
      max-active: 8
      max-idle: 8
      min-idle: 0

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      user-service-cb:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
      business-service-cb:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      talent-pool-service-cb:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true
  info:
    env:
      enabled: true

# Logging
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    reactor.netty: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/api-gateway.log

# Documentation
springdoc:
  swagger-ui:
    path: /swagger/index.html
    url: /v3/api-docs/merged

# Custom properties
api-gateway-url: ${API-GATEWAY-URL:http://localhost:8080}